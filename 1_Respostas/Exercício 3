1.Dada uma variável a do tipo char (um byte), escreva os trechos de código em C para: 

(a) Somente setar o bit menos significativo de a. 
a |= BIT0;


(b) Somente setar dois bits de a: o menos significativo e o segundo menos significativo. 
a |= BIT1 +BIT0;

(c) Somente zerar o terceiro bit menos significativo de a.

a|= BIT2;

(d) Somente zerar o terceiro e o quarto bits menos significativo de a.

a&=~(BIT5+BIT4);

(e) Somente inverter o bit mais significativo de a. 

a~BIT7;

(f) Inverter o nibble mais significativo de a, e setar o nibble menos significativo de a.

a~(BIT7+BIT6+BIT5+BIT4);
a|=(BIT3+BIT2+BIT1+BIT0);

2.Considerando a placa Launchpad do MSP430, escreva o código em C para piscar os dois LEDs ininterruptamente.
#include <msp450g2553.h>

#define LEDS=(BIT1 +BIT0)/*(BIT1 +BIT0) */
#define BTN
int main (void)
{
  WDTCTL= WDTPW + WDTHOLD;
  PIOUT=0;
  PIDIR= LEDS;
  FOR(;;)
  {
    IF (BTN=1)
    {
      PIOUT|=LEDS;
      BTN=0;    
    }
    ELSE
    {
      PIOUT=~LEDS;
      BTN=1;    
    }  
}

3.Considerando a placa Launchpad do MSP430, escreva o código em C para piscar duas vezes os dois LEDs sempre que o usuário pressionar 
o botão.

#include <msp450g2553.h>

#define LEDS=(BIT1 +BIT0) /*(bitx + bity) */
#define BTN=0   /* AUXILIAR */
int main (void)
{
  WDTCTL= WDTPW + WDTHOLD;
  PIOUT=0;
  PIDIR= LEDS;
  FOR(;;)
  {
    WHILE(P1IN & BTN < 4){
    PIOUT~LEDS;
    BTN++;
    }
    BTN=O;
  
  }
}

4.Considerando a placa Launchpad do MSP430, faça uma função em C que pisca os dois LEDs uma vez.
#include <msp450g2553.h>

#define LEDS=(BIT1 +BIT0) /*(bitx + bity) */
#define BTN=0   /* AUXILIAR */
int main (void)
{
  WDTCTL= WDTPW + WDTHOLD;
  PIOUT=0;
  PIDIR= LEDS;
  FOR(;;)
  {
    WHILE(BTN < 2){
    PIOUT~LEDS;
    BTN++;
    }  
  }
} 

5.Reescreva o código da questão 2 usando a função da questão 4.

#define LEDS=(BIT1 +BIT0) /*(bitx + bity) */
#define BTN=0   /* AUXILIAR */
led_uma_vez (void)
{
  WDTCTL= WDTPW + WDTHOLD;
  PIOUT=0;
  PIDIR= LEDS;
  FOR(;;)
  {
    WHILE(BTN < 2){
    PIOUT~LEDS;
    BTN++;
    }  
  }
} 
int main (void)
{
  WDTCTL= WDTPW + WDTHOLD;
  PIOUT=0;
  PIDIR= LEDS;
  FOR(;;)
  {
    WHILE(BTN2<2){
    led_uma_vez (void)
    BTN2++;
    }
}



6.Reescreva o código da questão 3 usando a função da questão 4.
#define LEDS=(BIT1 +BIT0) /*(bitx + bity) */
#define BTN=0   /* AUXILIAR */
led_uma_vez (void)
{
  WDTCTL= WDTPW + WDTHOLD;
  PIOUT=0;
  PIDIR= LEDS;
  FOR(;;)
  {
    WHILE(BTN < 2){
    PIOUT~LEDS;
    BTN++;
    }  
  }
} 
int main (void)
{
  WDTCTL= WDTPW + WDTHOLD;
  PIOUT=0;
  PIDIR= LEDS;
  FOR(;;)
  {
    WHILE(P1IN & BTN2<2){
    led_uma_vez (void)
    BTN2++;
    }
}
