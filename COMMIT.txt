/* 
Codigo para o MSP430 funcionar como mestre SPI que
pede dados a outro MSP430 (escravo SPI) de acordo
com o seguinte protocolo, apos o usuario pressionar
o botao do pino P1.3:
	I. Enviar o byte 0x55 e receber o byte 0xAA,
		o que indica o começo de uma conversão AD.
	II. Enviar os bytes 0x01 e 0x02, e receber o
		byte menos significativo e o mais
		significativo da conversão de 10 bits,
		nesta ordem.
Se o resultado da conversao AD for maior do que 1020
(ou seja, se o pino de leitura AD estiver proximo a Vcc),
o LED verde ficara aceso por 0,5 s.
Se o mestre enviar o byte inicial 0x55 e receber
outro byte que nao 0xAA, o LED vermelho ficara
aceso por 0,5 s.
Conexoes:
   P1.0: LED vermelho da placa Launchpad
   P1.1: conexao SPI MISO
   P1.2: conexao SPI MOSI
   P1.3: botao da placa Launchpad
   P1.4: conexao clock SPI
   P1.6: LED verde da placa Launchpad
*/

#include <msp430g2553.h>
#include <legacymsp430.h>

#define MISO BIT1
#define MOSI BIT2
#define SCLK BIT4
#define BTN BIT3
#define LED1 BIT0
#define LED2 BIT6
#define LEDs (BIT0|BIT6)
#define WAIT_SPI while( (IFG2 & UCA0RXIFG) == 0)

void Send_Data(volatile unsigned char c)
{
	while((IFG2&UCA0TXIFG)==0);
	UCA0TXBUF = c;
}

// Atraso de t*100 us //tempo para fazer a conversao
void Atraso(volatile unsigned int t)
{

	TACCR0 = 100-1;
	TACTL |= TACLR;
	TACTL = TASSEL_2 + ID_0 + MC_1;
	while(t--)
	{
		while((TACTL&TAIFG)==0);
		TACTL &= ~TAIFG;
	}
	TACTL = MC_0;
}

int main(void)
{
	WDTCTL = WDTPW + WDTHOLD;
	BCSCTL1 = CALBC1_1MHZ;
	DCOCTL = CALDCO_1MHZ;
	P1SEL2 = P1SEL = MOSI+MISO+SCLK; // Porque usar p1sel1 p1sel2? se não for a default, tem que habilitar o pino com a p1selx onde x=1 ou 2;
	
	P1OUT |= BTN;
	P1REN |= BTN;
	P1DIR &= ~BTN;
	P1IE = P1IES = BTN;
	P1OUT &= ~LEDs;
	P1DIR |= LEDs;

	UCA0CTL1 = UCSWRST; //recomendação: setar para ocorrer a configuração
	UCA0CTL1 |= UCSSEL_3; //ESCOLHENDO O CLOCK COMO SMCLK
	// ESTÁ DEFININDO A BAUNDRATE; A TAXA DE TRANMISSÃO BITS/SEGUNDOS
        UCA0MCTL = 0;
	UCA0BR0 = 1;
	UCA0BR1 = 0;
        // SETANDO O UCCKPH SETADO NA PRIMEIRA BORDA MANDA  E CAPTURA NA SEGUNDA OU O CONTRARIO, UCMST SERIA SLAVE OU MASTER, UCMODE_0 SAO TRES PINO E UCSYNC É MODO SINCRONO
	UCA0CTL0 = UCCKPH + UCMST + UCMSB + UCMODE_0 + UCSYNC;
	//
	UCA0CTL1 &= ~UCSWRST;
	// LIGA AS INTERRUPÇÕES GLOBAIS
	_BIS_SR(LPM4_bits + GIE);
	return 0;
}

//SERA A INTERRUPÇAO DA PORTA P1
interrupt(PORT1_VECTOR) P1_ISR(void)
{
	volatile unsigned int d=0;
	P1OUT &= ~LEDs;
	while((P1IN&BTN)==0);
//INICIA O PROTOCOLO
	Send_Data(0x55);
        //FUNÇÃO PARA SETAR A FLAG DE START DA COMUNICAÇÃO
	WAIT_SPI;
        // SE O BUF FOR 0XAA, MANDA 0X01;
	if(UCA0RXBUF== 0xAA)
	{
		Atraso(1);
		Send_Data(0x01);
		WAIT_SPI;
		d = UCA0RXBUF;

		Send_Data(0x02);
		WAIT_SPI;
		d |= (UCA0RXBUF<<8);
		
		if(d>1020)
			P1OUT |= LED2;
	}
	else
		P1OUT |= LED1;

	Atraso(5000);
	//LÊ OS LEDS
	P1OUT &= ~LEDs;
	//APAGA A FLAG DA INTERRUPÇÃO
	P1IFG &= ~BTN;
}

********************************************************************************************************************************
SPI.2
/* 
Codigo para o MSP430 funcionar como escravo SPI de
acordo com o seguinte protocolo:
  	I. Receber o byte 0x55 e enviar o byte 0xAA,
  		o que indica o começo de uma conversão AD.
	II. Receber os bytes 0x01 e 0x02, e enviar o
		byte menos significativo e o mais
		significativo da conversão de 10 bits do
		sinal analogico no pino P1.0, nesta ordem.
Conexoes:
   P1.0: sinal analogico entre 0 e Vcc
   P1.1: conexao SPI MISO
   P1.2: conexao SPI MOSI
   P1.4: conexao clock SPI
   P1.6: LED verde da placa Launchpad
*/

#include <msp430g2553.h>
#include <legacymsp430.h>

#define AD_IN BIT0
#define AD_INCH INCH_0
#define MISO BIT1
#define MOSI BIT2
#define SCLK BIT4
#define LED  BIT6

void Send_Data(volatile unsigned char c)
{
	while((IFG2&UCA0TXIFG)==0);
	UCA0TXBUF = c;
}

int main(void)
{
	WDTCTL = WDTPW + WDTHOLD;
	BCSCTL1 = CALBC1_16MHZ;
	DCOCTL = CALDCO_16MHZ;
	P1SEL2 = P1SEL = MOSI+MISO+SCLK;
	P1OUT &= ~LED;
	P1DIR |= LED;

	ADC10AE0  = AD_IN;
	ADC10CTL0 = SREF_0 + ADC10SHT_0 + ADC10IE + ADC10ON;
	//START CONVERTION, UMA NOVA CONVERSÃO
	ADC10CTL1 = AD_INCH + SHS_0 + ADC10DIV_0 + ADC10SSEL_3 + CONSEQ_0;

	UCA0CTL1 = UCSWRST;
	//O MESTRE NÃO ESTÁ SETADO
	UCA0CTL0 = UCCKPH + UCMSB + UCMODE_0 + UCSYNC;
	UCA0CTL1 &= ~UCSWRST;
	//DEIXANDO NO BUFFER PORQUE E NÃO MANDA PORQUE É SLAVE
	Send_Data(0xAA);

	IE2 |= UCA0RXIE;
	
	_BIS_SR(LPM0_bits + GIE);
	return 0;
}

interrupt(USCIAB0RX_VECTOR) Receive_Data(void)
{
	static unsigned int d = 1023;
	// BUFFER TEM ESSE VALOR PARA TRANSMITIR DE ACORDO CO O PROTOCOLO
	if(UCA0RXBUF==0x55)
	{
		P1OUT |= LED;
		ADC10CTL0 |= ENC+ADC10SC;
		while( (ADC10CTL0 & ADC10IFG) == 0);
		d = ADC10MEM;
		//d=1023;
**********************************************************************************************************************************
i²c MASTER

/* 
Codigo para o MSP430 funcionar como mestre I2C que
pede dados a outro MSP430 (escravo I2C) de acordo
com o seguinte protocolo,  apos o usuario pressionar
o botao do pino P1.3:
	I. Enviar o byte 0x55, o que indica o começo
		de uma conversão AD.
	II. Receber o byte menos significativo e o mais
		significativo da conversão de 10 bits,
		nesta ordem.
Se o resultado da conversao AD for maior do que 1020
(ou seja, se o pino de leitura AD estiver proximo a Vcc),
o LED verde ficara aceso por 0,5 s.
Conexoes:
   P1.0: LED vermelho da placa Launchpad
   P1.3: botao da placa Launchpad
   P1.6: conexao clock I2C (SCL)
   P1.7: conexao dados I2C (SDA)
*/

#include <msp430g2553.h>
#include <legacymsp430.h>

#define LED BIT0
#define BTN BIT3

void init_P1(void);
void init_I2C(void);
void Transmit(unsigned int slave_address, unsigned char data[], unsigned int len);
void Receive (unsigned int slave_address, unsigned char data[], unsigned int len);
void Atraso(volatile unsigned int t);

int main(void)
{
	WDTCTL = WDTPW + WDTHOLD;                 // Stop WDT
	BCSCTL1 = CALBC1_1MHZ;
	DCOCTL = CALDCO_1MHZ;
	init_P1();
	init_I2C();
	P1OUT ^= LED;
	Atraso(5000);
	P1OUT ^= LED;
	_BIS_SR(LPM4_bits | GIE);
	return 1;
}

void init_I2C()
{
	UCB0CTL1 |= UCSWRST;                      // Enable SW reset
	UCB0CTL0 = UCMST + UCMODE_3 + UCSYNC;     // I2C Master, synchronous mode
	UCB0CTL1 = UCSSEL_2 + UCSWRST;            // Use SMCLK, keep SW reset
	UCB0BR0 = 10;                             // fSCL = SMCLK/10 = 100kHz
	UCB0BR1 = 0;
	P1SEL |= BIT6 + BIT7;                     // Assign I2C pins to USCI_B0
	P1SEL2|= BIT6 + BIT7;                     // Assign I2C pins to USCI_B0
	UCB0CTL1 &= ~UCSWRST;                     // Clear SW reset, resume operation
	//IE2 |= UCB0RXIE + UCB0TXIE;               //Enable RX and TX interrupt
}

void Transmit(unsigned int slave_address, unsigned char data[], unsigned int len)
{
	volatile unsigned int i;
	
	while(UCB0CTL1 & UCTXSTP);             // Ensure stop condition got sent
	UCB0I2CSA = slave_address;
	UCB0CTL1 |= UCTR; 
	UCB0CTL1 |= UCTXSTT;             // I2C TX, start condition
	//P1OUT |= LED;
	if(len==1)
	{
		UCB0TXBUF = data[0];
		while(UCB0CTL1 & UCTXSTT);
		//while((IFG2 & UCB0TXIFG)==0);
		UCB0CTL1 |= UCTXSTP;
	}
	else
	{
		UCB0TXBUF = data[0];
		while(UCB0CTL1 & UCTXSTT);
		for(i=1; i<len; i++)
		{
			UCB0TXBUF = data[i];
			while((IFG2 & UCB0TXIFG)==0);
		}
		UCB0CTL1 |= UCTXSTP;
	}
	while(UCB0CTL1 & UCTXSTP);
}

void Receive(unsigned int slave_address, unsigned char data[], unsigned int len)
{
	volatile unsigned int i;
	UCB0I2CSA = slave_address;
	while(UCB0CTL1 & UCTXSTP);             // Ensure stop condition got sent
	UCB0CTL1 &= ~UCTR ;                     // Clear UCTR
	UCB0CTL1 |= UCTXSTT;                    // I2C start condition
	while(UCB0CTL1 & UCTXSTT);             // Start condition sent?
	
	for(i=0; i<len; i++)
	{
		if((len-i)==1)
			UCB0CTL1 |= UCTXSTP;
		while((IFG2 & UCB0RXIFG)==0);
		data[i] = UCB0RXBUF;
	}
	while(UCB0CTL1 & UCTXSTP);
}

void init_P1(void)
{
	P1OUT &= ~LED;
	P1DIR |= LED;
	P1DIR &= ~BTN;
	P1REN |= BTN;
	P1OUT |= BTN;
	P1IES |= BTN;
	P1IE  |= BTN;
}

// Atraso de t*100 us
void Atraso(volatile unsigned int t)
{

	TACCR0 = 100-1;
	TACTL |= TACLR;
	TACTL = TASSEL_2 + ID_0 + MC_1;
	while(t--)
	{
		while((TACTL&TAIFG)==0);
		TACTL &= ~TAIFG;
	}
	TACTL = MC_0;
}

interrupt(PORT1_VECTOR) P1_ISR(void)
{
	volatile unsigned int MSP430_slave = 0xAD;
	unsigned char t = 0x55, rcv[2];
	unsigned int d=0;
	while((P1IN & BTN)==0);
	Transmit(MSP430_slave, &t, 1);
	Atraso(1);
	//CONCATENA
	Receive(MSP430_slave, rcv, 2);
	d = (unsigned int)rcv[1];
	d = (d<<8) | ((unsigned int)rcv[0]);
	//P1OUT &= ~LED;
	if(d>1020)
	{
		Atraso(5000);
		P1OUT |= LED;
		Atraso(5000);
		P1OUT &= ~LED;
	}
	P1IFG = 0;
}

		Send_Data(d & 0xff);
	}
	else if(UCA0RXBUF==0x01)
	{
		Send_Data(d>>8);
	}
	else if(UCA0RXBUF==0x02)
	{
		Send_Data(0xAA);
		P1OUT &= ~LED;
	}
/*	else
	{
		P1OUT |= LED;
		d = 0x3ff;
		while(d--);
		P1OUT &= ~LED;
	}*/
	IFG2 &= ~UCA0RXIFG;
}
*********************************************************************************************************************************
I²C SLAVE
* 
Codigo para o MSP430 funcionar como escravo I2C de
acordo com o seguinte protocolo:
  	I. Receber o byte 0x55, o que indica o começo
  		de uma conversão AD.
	II. Enviar o byte menos significativo e o mais
		significativo da conversão de 10 bits do
		sinal analogico no pino P1.0, nesta ordem.
Conexoes:
   P1.0: LED vermelho da placa Launchpad
   P1.3: botao da placa Launchpad
   P1.6: conexao clock I2C (SCL)
   P1.7: conexao dados I2C (SDA)
*/

#include <msp430g2553.h>
#include <legacymsp430.h>

#define AD_IN BIT0
#define AD_INCH INCH_0
#define SCL BIT6
#define SDA BIT7

void init_P1(void);
void init_I2C(volatile unsigned int slave_address);
void init_AD(void);
void Transmit(unsigned char data[], unsigned int len);

int main(void)
{
	WDTCTL = WDTPW + WDTHOLD;                 // Stop WDT
	BCSCTL1 = CALBC1_1MHZ;
	DCOCTL = CALDCO_1MHZ;
	init_P1();
	init_AD();
	init_I2C(0xAD);
	_BIS_SR(LPM0_bits | GIE);
	return 0;
}

void init_I2C(volatile unsigned int slave_address)
{
	UCB0CTL1 |= UCSWRST;                      // Enable SW reset
	UCB0CTL1 &= ~UCTR;
	UCB0CTL0 = UCMODE_3 + UCSYNC;             // I2C Master, synchronous mode
	UCB0I2COA = slave_address; //|UCGCEN;
	P1SEL |= SCL | SDA;                       // Assign I2C pins to USCI_B0
	P1SEL2|= SCL | SDA;                       // Assign I2C pins to USCI_B0
	UCB0STAT &= ~(UCSTPIFG | UCSTTIFG);
	UCB0CTL1 &= ~UCSWRST;                     // Clear SW reset, resume operation
	IE2 |= UCB0RXIE;// + UCB0TXIE;               //Enable RX and TX interrupt
	//UCB0I2CIE |= UCSTPIE | UCSTTIE;
}

void Transmit(unsigned char data[], unsigned int len)
{
	volatile unsigned int i;
	for(i=0; i<len; i++)
	{
		while((IFG2 & UCB0TXIFG)==0);
		UCB0TXBUF = data[i];
	}
}

void init_P1(void)
{
	P1OUT &= ~LED;
	P1DIR |= LED;
}

void init_AD(void)
{
	ADC10AE0  = AD_IN;
	ADC10CTL0 = SREF_0 + ADC10SHT_0 + ADC10IE + ADC10ON;
	ADC10CTL1 = AD_INCH + SHS_0 + ADC10DIV_0 + ADC10SSEL_3 + CONSEQ_0;
}

interrupt(USCIAB0TX_VECTOR) USCIAB0TX_ISR(void)
{
	unsigned int d = 1023;
	unsigned char d_send[2];
	P1OUT |= LED;
	if(IFG2 & UCB0RXIFG)
	{
		if(UCB0RXBUF==0x55)
		{
			ADC10CTL0 |= ENC+ADC10SC;
			while( (ADC10CTL0 & ADC10IFG) == 0);
			d = ADC10MEM;
			d_send[0] = d & 0xff;
			d_send[1] = d>>8;
			while( (UCB0STAT & UCSTTIFG)==0);
			Transmit(d_send, 2);
			UCB0STAT &= ~(UCSTPIFG | UCSTTIFG);
		}
		P1OUT &= ~LED;	
	}
	IFG2 &= ~(UCB0TXIFG|UCB0RXIFG);
}

/*interrupt(USCIAB0RX_VECTOR) USCIAB0RX_ISR(void)
{
	P1OUT |= LED;
	Atraso(1000);
	UCB0STAT &= ~(UCSTPIFG | UCSTTIFG);
	P1OUT &= ~LED;
}*/